@using Microsoft.EntityFrameworkCore
@inject PPE.Data.AppDbContext Context;
@{
    ViewData["Title"] = "Dashboard";
    var StockDetails = Context.MainStocks
        .Include(s => s.PpeAttributeCategoryAttributeValue)
        .ThenInclude(pav => pav.Ppe)
        .Include(s => s.PpeAttributeCategoryAttributeValue)
        .ThenInclude(pav => pav.AttributeValueAttributeCategory)
        .ThenInclude(avac => avac.AttributeValue)
        //.ThenInclude(ac => ac.Attribute)
        .ThenInclude(av => av.Value)
        .GroupBy(s => s.PpeAttributeCategoryAttributeValue.Ppe)
        .Select(s => new
        {
            Ppe = s.Key,
            StockIn = s.Sum(s => s.QuantityIn),
            StockOut = s.Sum(s => s.QuantityOut),
            CurrentStock = s.Sum(s => s.QuantityIn) - s.Sum(s => s.QuantityOut)
        });
}

@*<div class="card">
    <div class="card-body">
        <form asp-action="UploadFile" method="post" enctype="multipart/form-data">
            <div class="form-group">
                <label for="file">Select Excel File:</label>
                <input type="file" name="file" id="file" />
            </div>
            <button type="submit">Upload</button>
        </form>
        <form asp-action="Upload" enctype="multipart/form-data">
            <div class="form-group">
                <input class="form-control" name="file" type="file"/>
            </div>
                    <button class="btn btn-primary" type="submit">Import</button>
                </form>
        
    </div>
</div>*@

<canvas id="ppeChart" width="400" height="100"></canvas>

<section class="out-of-stock">
    <div class="container">
        <table class="table table-bordered bg-white">
            <thead>
            <tr>
                <th>Ppe</th>
                <th>Stock in</th>
                <th>Stock out</th>
                <th>Current Stock</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in ViewBag.Stock)
            {
                <tr>
                    <td>@item.Ppe</td>
                    <td>@item.StockIn</td>
                    <td>@item.StockOut</td>
                    <td>@item.CurrentStock</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</section>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let labels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Labels));
            let data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Data));
            let stockIn = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.StockIns));
            let stockOut = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.StockOuts));
                    
            let ctx = document.getElementById('ppeChart').getContext('2d');
            let myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Current Stock',
                        data: data,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Stock Out',
                        data: stockOut,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Stock In',
                        data: stockIn,
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });
    </script>
}
