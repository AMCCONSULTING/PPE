@{
    ViewData["title"] = "Details Project Stock";
    ViewBag.Buttons = new List<ButtonModel> {
        new ButtonModel {
            Text = "Back to project list",
            Action = "Index",
            Controller = "Projects",
            ButtonType = "dark"
        }};
}

<div class="d-flex justify-content-between align-items-center mb-2">
    <h5>Stock of: @ViewBag.Ppe.Title</h5>
    <div>
        <a asp-action="Details" asp-controller="Projects" asp-route-id="@ViewBag.ProjectId" class="btn btn-primary">
            Back to project details
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-6 col-12">
        <div class="bg-white">
            <canvas id="stockChart" width="100%" height="50"></canvas>
        </div>
    </div>
    <div class="col-md-6 col-12">
        <div class="bg-white">
            <table class="table responsive">
                <thead>
                <tr>
                    <th>PPE variant</th>
                    <th>StockIn</th>
                    <th>StockOut</th>
                    <th>Current Stock</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in ViewBag.GroupedStocks)
                {
                    <tr>
                        <td>@item.Value</td>
                        <td>@item.StockIn.ToString()</td>
                        <td>@item.StockOut.ToString()</td>
                        <td>@item.CurrentStock.ToString()</td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/app-assets/vendors/js/charts/chart.min.js"></script>
    <script>
        $(document).ready(function () {
              let ctx = document.getElementById('stockChart').getContext('2d');
                    let labels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Labels));
                    let currentQuantities = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.currentStocks));
                    let stockOutQuantities = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.stockOut));
                    let stockInQuantities = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.stockIn));
                    let myChart = new Chart(ctx, {
                        type: 'bar',
                       
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Stock In Quantity',
                                data: stockInQuantities,
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }, {
                                label: 'Stock Out Quantity',
                                data: stockOutQuantities,
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1
                            }, {
                                label: 'Current Quantity',
                                data: currentQuantities,
                                backgroundColor: 'rgba(20,139,12,0.2)',
                                borderColor: 'rgb(3,120,9)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            },
                            animation: {
                                  onComplete: () => {
                                    delayed = true;
                                  },
                                  delay: (context) => {
                                    let delay = 0;
                                    if (context.type === 'data' && context.mode === 'default' && !delayed) {
                                      delay = context.dataIndex * 300 + context.datasetIndex * 100;
                                    }
                                    return delay;
                                  },
                            }                                  
                        }
                    });
        });
    </script>
}